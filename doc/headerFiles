The following code has been copied from the tiers directory
and may not be up-to-date.  I'm using it here to describe what's
required by the C++ Middleware Writer (CMW) to make types
serializable.

1  struct cmwAccount{
2    ::cmw::MarshallingInt number;
3    ::cmw::FixedString60 password;
4
5    cmwAccount (int n,char const* p):number(n),password(p){}
6    template<class R>explicit cmwAccount (::cmw::ReceiveBuffer<R>&);
7
8    void marshalMembers (::cmw::SendBuffer&)const;
9    void marshal (::cmw::SendBuffer& b)const{marshalMembers(b);}
10 };

Lines 6,8 and 9 are the focus.

It's possible that you may only need a "stream constructor" (line
6) and wouldn't need to add lines 8 and 9.

Alternatively, you might only need to serialize instances of a type
and not need a stream ctor.  In that case, lines 8 and 9 are needed.
Line 9 represents a customization point.  In this case there's no
customization being done.

The stream ctor and the marshalMembers() functions can be generated/
maintained by the CMW.  The CMW's implementation of marshalMembers() can
be seen in the cmwA.mdl.h file in the tiers directory.

If the CMW isn't able yet to correctly generate code for a given type,
you may have to add a comment, shown below, within the body of the type.
In that case it's up to you to provide the implementation for 'marshal'.
For example:

1  class Abc{
2    //CMW_skip
3
4  public:
5    template<class R>explicit Abc (::cmw::ReceiveBuffer<R>&){
6      // you provide the implementation
7    }
8
9    void marshal (::cmw::SendBuffer& b)const{
10     // you provide the implementation
11   }
12 };
