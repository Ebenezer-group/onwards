#pragma once
// Code generated by the C++ Middleware Writer version 1.14.
#include<ReceiveBuffer.hh>
#include<SendBuffer.hh>
#include"message_id_types.hh"
#include<array>
#include<plf_colony.h>
#include<set>
#include<string>
#include<vector>

namespace receive_messages{
template <class R>
void Give (::cmw::ReceiveBuffer<R>& buf
         ,::std::vector<int32_t>& a1
         ,::std::string& a2){
  int32_t count[1];
  count[0]=::cmw::Give<uint32_t>(buf);
  if(count[0]>0){
    a1.resize(a1.size()+count[0]);
    buf.GiveBlock(&(*(a1.end()-count[0])),count[0]);
  }
  a2=buf.GiveString();
}

template <class R>
void Give (::cmw::ReceiveBuffer<R>& buf
         ,::std::set<int32_t>& a1){
  int32_t count[1];
  count[0]=::cmw::Give<uint32_t>(buf);
  auto endIt1=a1.end();
  for(;count[0]>0;--count[0]){
    a1.emplace_hint(endIt1,::cmw::Give<uint32_t>(buf));
  }
}

template <class R>
void Give (::cmw::ReceiveBuffer<R>& buf
         ,::std::array<::std::array<float, 2>, 3>& a1){
  buf.GiveBlock(&a1[0][0], sizeof a1 / sizeof(float));
}

template <class R>
void Give (::cmw::ReceiveBuffer<R>& buf
         ,::plf::colony<::std::string>& a1){
  int32_t count[1];
  count[0]=::cmw::Give<uint32_t>(buf);
  a1.reserve(a1.size()+count[0]);
  for(;count[0]>0;--count[0]){
    a1.insert(buf.GiveString());
  }
}
}
