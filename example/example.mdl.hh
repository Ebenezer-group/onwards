//File generated by the C++ Middleware Writer version 1.15.
#pragma once

struct exampleMessages{
static void mar (auto& buf
         ,::std::vector<::int32_t> const& a
         ,::std::string const& b){
  receiveBlock(buf,a);
  receive(buf,b);
}

static void give (auto& buf
         ,::std::vector<::int32_t>& a
         ,::std::string& b){
  ::cmw::giveVec(buf,a);
  b=buf.giveStringView();
}

static void mar (auto& buf
         ,::std::set<::int32_t> const& a){
  receive(buf,::cmw::asFour(a.size()));
  for(auto const& e1:a){
    receive(buf,e1);
  }
}

static void give (auto& buf
         ,::std::set<::int32_t>& a){
  auto z3=a.end();
  for(int32_t ca=::cmw::give<uint32_t>(buf);ca>0;--ca){
    a.emplace_hint(z3,::cmw::give<uint32_t>(buf));
  }
}

static void mar (auto& buf
         ,::std::array<float,6> const& a){
  buf.receive(&a,sizeof a);
}

static void give (auto& buf
         ,::std::array<float,6>& a){
  buf.giveBlock(&a[0],sizeof a/sizeof(float));
}

template<messageID id,int maxLength=10000>
static void marshal (auto& buf,auto&&...t)try{
  buf.reserveBytes(buf.getZ()+sizeof id);
  mar(buf,::std::forward<decltype(t)>(t)...);
  buf.fillInHdr(maxLength,id);
}catch(...){buf.rollback();throw;}
};
